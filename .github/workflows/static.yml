# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
<!DOCTYPE html>
<html>
<head>
    <title>لعبة Tic-Tac-Toe</title>
    <style>
        #game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }
        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            border: 1px solid #000;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>لعبة Tic-Tac-Toe</h1>
    <div id="game-board"></div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const gameBoard = document.getElementById('game-board');
            let currentPlayer = 'X';
            let cells = Array.from({ length: 9 }, () => '');

            cells.forEach((_, index) => {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.addEventListener('click', () => makeMove(cell, index));
                gameBoard.appendChild(cell);
            });

            function makeMove(cell, index) {
                if (cells[index] === '') {
                    cell.textContent = currentPlayer;
                    cells[index] = currentPlayer;
                    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                    checkWinner();
                }
            }

            function checkWinner() {
                const winningCombinations = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8],
                    [0, 3, 6], [1, 4, 7], [2, 5, 8],
                    [0, 4, 8], [2, 4, 6]
                ];

                for (const combination of winningCombinations) {
                    const [a, b, c] = combination;
                    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {
                        alert(`Player ${cells[a]} wins!`);
                        resetGame();
                        return;
                    }
                }

                if (cells.every(cell => cell !== '')) {
                    alert('Draw!');
                    resetGame();
                }
            }

            function resetGame() {
                cells = Array.from({ length: 9 }, () => '');
                document.querySelectorAll('.cell').forEach(cell => cell.textContent = '');
                currentPlayer = 'X';
            }
        });
    </script>
</body>
</html>
